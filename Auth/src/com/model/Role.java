package com.model;

import com.auth.base.MyConstant;
import com.auth.util.Empty;
import com.auth.util.TimeUtil;
import com.auth.util.MyUUID;
import com.jfinal.aop.Before;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.tx.Tx;
import com.model.base.BaseRole;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Role extends BaseRole<Role> {
	public static final Role dao = new Role();

	/**
	 * 获得所有角色
	 * @param pageNumber
	 * @param pageSize
	 * @param keyword
	 * @return
	 */
	public com.jfinal.plugin.activerecord.Page<Role> list(int pageNumber,int pageSize ,String keyword){
		String sql = "SELECT * ";
		String where = " FROM "+ MyConstant.TABLE_PREFIX+"role "+keyword;
		return dao.paginate(pageNumber, pageSize, sql, where);
	}

	/**
	 * 根据当前用户得到他所管理的角色
	 * @param pageNumber
	 * @param pageSize
	 * @param keyword
	 * @param bindUserId
	 * @return
	 */
	public com.jfinal.plugin.activerecord.Page<Role> listByBindUserId(int pageNumber,int pageSize ,String keyword,String bindUserId){
		String sql = "SELECT * ";
		String where = " FROM "+MyConstant.TABLE_PREFIX+"role WHERE "+keyword + " user_id = ?";
		return dao.paginate(pageNumber, pageSize, sql, where,bindUserId);
	}

	/**
	 * 获得该用户下所有角色，包括其下所有用户建立的角色
	 * @param pageNumber
	 * @param pageSize
	 * @param keyword
	 * @param bindId
	 * @return
	 */
	public com.jfinal.plugin.activerecord.Page<Role> listByBindId(int pageNumber,int pageSize ,String keyword,String bindId){
		String sql = "SELECT * ";
		String where = " FROM "+MyConstant.TABLE_PREFIX+"role WHERE "+keyword + " user_id = ?";
		return dao.paginate(pageNumber, pageSize, sql, where,bindId);
	}



	public boolean save(Role role,String resIds){
		Subject subject = SecurityUtils.getSubject();
		User user = (User)subject.getSession().getAttribute("user");
		boolean is_success = false;
		if(!Empty.isEmpty(role.getRoleId())){
			is_success =  role.set("updated_at", TimeUtil.getTime()).update();
		}else{
			role.set("role_id", MyUUID.getUUID()).set("created_at", TimeUtil.getTime());
			is_success = role.save();
		}

		if(is_success){
			String sqld = "DELETE FROM "+MyConstant.TABLE_PREFIX+"role_res WHERE role_id = ?";
			int a = Db.update(sqld, role.getRoleId());
			String[] ids = resIds.split(",");
			for(int i=0;i<ids.length;i++){
				RoleRes rr1 = new RoleRes();
				rr1.set("role_id", role.getRoleId()).set("res_id", ids[i]).save();
			}
			return true;
		}
		return false;
	}

	@Before(Tx.class)
	public boolean delete(List<Role> list){
		boolean is_success ;
		for(int i=0;i<list.size();i++){
			Role role = new Role();
			is_success = role.deleteById(list.get(i).getRoleId());//删除角色
			if(is_success){
				String sql = "SELECT * FROM "+MyConstant.TABLE_PREFIX+"role_res WHERE role_id = ?";
				List<RoleRes> rr = RoleRes.dao.find(sql,list.get(i).getRoleId());
				for(int j=0;j<rr.size();j++){
					RoleRes rr1 = new RoleRes();
					rr1.deleteById(list.get(i).getRoleId());//删除该角色权限
				}
			}else{
				return false;
			}
		}
		return true;
	}

}
